# POST weather API tests
test_name: Try to create a weather entry without providing authentication

includes:
  - !include fixture/server-config.yaml
  - !include fixture/api-data.yaml
  - !include fixture/test-data.yaml

stages:
  - name: Check that HTTP status code is 401
    request:
      url: "{config.baseUrl:s}:{config.port:d}{endpoints.createWeather:s}"
      json:
        city: "{valid.validCity:s}"
        date: "{valid.validDate:s}"
        temperature: "{valid.validTemp:f}"
      method: POST
      headers:
        content-type: "{headers.contentType:s}"
    response:
      status_code: 401

---

test_name: Create a weather entry

includes:
  - !include fixture/server-config.yaml
  - !include fixture/api-data.yaml
  - !include fixture/test-data.yaml

stages:
  - name: Check that HTTP status code is 200 and response media type is json
    request:
      url: "{config.baseUrl:s}:{config.port:d}{endpoints.createWeather:s}"
      json:
        city: "{valid.validCity:s}"
        date: "{valid.validDate:s}"
        temperature: "{valid.validTemp:f}"
      method: POST
      headers:
        Authorization: "{headers.auth:s}"
        content-type: "{headers.contentType:s}"
    response:
      status_code: 200
      headers:
        Content-Type: "{headers.contentType:s}"
      verify_response_with:
        function: tavern.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              id:
                type: str
              city:
                type: str
              date:
                type: str
              temperature:
                type: float

---

test_name: Try to create a weather entry with empty value in city

includes:
  - !include fixture/server-config.yaml
  - !include fixture/api-data.yaml
  - !include fixture/test-data.yaml

stages:
  - name: Check that HTTP status code is 400
    request:
      url: "{config.baseUrl:s}:{config.port:d}{endpoints.createWeather:s}"
      json:
        city: ""
        date: "{valid.validDate:s}"
        temperature: "{valid.validTemp:f}"
      method: POST
      headers:
        Authorization: "{headers.auth:s}"
        content-type: "{headers.contentType:s}"
    response:
      status_code: 400

---

test_name: Try to create a weather entry with empty value in date

includes:
  - !include fixture/server-config.yaml
  - !include fixture/api-data.yaml
  - !include fixture/test-data.yaml

stages:
  - name: Check that HTTP status code is 400
    request:
      url: "{config.baseUrl:s}:{config.port:d}{endpoints.createWeather:s}"
      json:
        city: "{valid.validCity:s}"
        date: ""
        temperature: "{valid.validTemp:f}"
      method: POST
      headers:
        Authorization: "{headers.auth:s}"
        content-type: "{headers.contentType:s}"
    response:
      status_code: 400

---

test_name: Try to create a weather entry with empty value in temperature

includes:
  - !include fixture/server-config.yaml
  - !include fixture/api-data.yaml
  - !include fixture/test-data.yaml

stages:
  - name: Check that HTTP status code is 400
    request:
      url: "{config.baseUrl:s}:{config.port:d}{endpoints.createWeather:s}"
      json:
        city: "{valid.validCity:s}"
        date: "{valid.validDate:s}"
        temperature:
      method: POST
      headers:
        Authorization: "{headers.auth:s}"
        content-type: "{headers.contentType:s}"
    response:
      status_code: 400

---

test_name: Try to create a weather entry with wrong date format

includes:
  - !include fixture/server-config.yaml
  - !include fixture/api-data.yaml
  - !include fixture/test-data.yaml

stages:
  - name: Check that HTTP status code is 400
    request:
      url: "{config.baseUrl:s}:{config.port:d}{endpoints.createWeather:s}"
      json:
        city: "{valid.validCity:s}"
        date: "{invalid.invalidDate:s}"
        temperature: "{valid.validTemp:f}"
      method: POST
      headers:
        Authorization: "{headers.auth:s}"
        content-type: "{headers.contentType:s}"
    response:
      status_code: 400

---

test_name: Try to create a weather entry with empty request body

includes:
  - !include fixture/server-config.yaml
  - !include fixture/api-data.yaml

stages:
  - name: Check that HTTP status code is 400
    request:
      url: "{config.baseUrl:s}:{config.port:d}{endpoints.createWeather:s}"
      method: POST
      headers:
        Authorization: "{headers.auth:s}"
        content-type: "{headers.contentType:s}"
    response:
      status_code: 400

---

#GET weather API tests
test_name: Get weather entry without providing authentication

includes:
  - !include fixture/server-config.yaml
  - !include fixture/api-data.yaml

stages:
  - name: Check that HTTP status code is 500
    request:
      url: "{config.baseUrl:s}:{config.port:d}{endpoints.getWeather:s}"
      method: GET
    response:
      status_code: 500

---

test_name: Get weather entry without providing any query param

includes:
  - !include fixture/server-config.yaml
  - !include fixture/api-data.yaml

stages:
  - name: Check that HTTP status code is 200 and response body is empty
    request:
      url: "{config.baseUrl:s}:{config.port:d}{endpoints.getWeather:s}"
      method: GET
      headers:
        Authorization: "{headers.auth:s}"
    response:
      status_code: 200
      json: []

---

test_name: Get weather entry with city

includes:
  - !include fixture/server-config.yaml
  - !include fixture/api-data.yaml
  - !include fixture/test-data.yaml

stages:
  - name: Check that HTTP status code is 200
    request:
      url: "{config.baseUrl:s}:{config.port:d}{endpoints.getWeather:s}"
      method: GET
      params:
        city: "{valid.validCity:s}"
      headers:
        Authorization: "{headers.auth:s}"
    response:
      status_code: 200
      headers:
        Content-Type: "{headers.contentType:s}"

---

test_name: Get weather entry with date

includes:
  - !include fixture/server-config.yaml
  - !include fixture/api-data.yaml
  - !include fixture/test-data.yaml

stages:
  - name: Check that HTTP status code is 200
    request:
      url: "{config.baseUrl:s}:{config.port:d}{endpoints.getWeather:s}"
      method: GET
      params:
        date: "{valid.validDate:s}"
      headers:
        Authorization: "{headers.auth:s}"
    response:
      status_code: 200
      headers:
        Content-Type: "{headers.contentType:s}"

---

test_name: Get weather entry with date in wrong format

includes:
  - !include fixture/server-config.yaml
  - !include fixture/api-data.yaml
  - !include fixture/test-data.yaml

stages:
  - name: Check that HTTP status code is 500
    request:
      url: "{config.baseUrl:s}:{config.port:d}{endpoints.getWeather:s}"
      method: GET
      params:
        date: "{invalid.invalidDate:s}"
      headers:
        Authorization: "{headers.auth:s}"
    response:
      status_code: 500

---

#Error API test
test_name: Get error API response

includes:
  - !include fixture/server-config.yaml
  - !include fixture/api-data.yaml

stages:
  - name: Check that HTTP status code is 500
    request:
      url: "{config.baseUrl:s}:{config.port:d}{endpoints.errorApi:s}"
      method: GET
      headers:
        Authorization: "{headers.auth:s}"
        content-type: "{headers.contentType:s}"
    response:
      status_code: 500